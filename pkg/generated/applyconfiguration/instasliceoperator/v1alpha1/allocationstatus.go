/*
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

// AllocationStatusApplyConfiguration represents a declarative configuration of the AllocationStatus type for use
// with apply.
type AllocationStatusApplyConfiguration struct {
	AllocationStatusDaemonset  *string `json:"allocationStatusDaemonset,omitempty"`
	AllocationStatusController *string `json:"allocationStatusController,omitempty"`
}

// AllocationStatusApplyConfiguration constructs a declarative configuration of the AllocationStatus type for use with
// apply.
func AllocationStatus() *AllocationStatusApplyConfiguration {
	return &AllocationStatusApplyConfiguration{}
}

// WithAllocationStatusDaemonset sets the AllocationStatusDaemonset field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the AllocationStatusDaemonset field is set to the value of the last call.
func (b *AllocationStatusApplyConfiguration) WithAllocationStatusDaemonset(value string) *AllocationStatusApplyConfiguration {
	b.AllocationStatusDaemonset = &value
	return b
}

// WithAllocationStatusController sets the AllocationStatusController field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the AllocationStatusController field is set to the value of the last call.
func (b *AllocationStatusApplyConfiguration) WithAllocationStatusController(value string) *AllocationStatusApplyConfiguration {
	b.AllocationStatusController = &value
	return b
}
